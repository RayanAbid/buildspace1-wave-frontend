{"version":3,"sources":["App.js","index.js"],"names":["App","useState","setCurrentAccount","loading","setLoading","hasWallet","setHasWallet","totalWaves","setTotalWaves","userMessage","setUserMessage","userLink","setUserLink","allWaves","setAllWaves","contractAddress","contractABI","abi","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","link","length","console","log","checkIfWalletConnected","request","method","accounts","account","getTotalWaves","functions","count","toNumber","gasLimit","waveTxn","hash","wait","getYoutubeId","url","match","React","useEffect","className","style","width","src","placeholder","type","onChange","e","target","value","onClick","map","index","Card","key","background","justifyContent","padding","margin","height","frameborder","allowfullscreen","Body","Title","fontWeight","Text","fontSize","toString","backgroundColor","marginTop","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1b3ae3e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport abi from \"./utills/WavePortal.json\";\nimport { Card, Col, Row } from \"react-bootstrap\";\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [hasWallet, setHasWallet] = useState(false);\n  const [totalWaves, setTotalWaves] = useState(0);\n  const [userMessage, setUserMessage] = useState(0);\n  const [userLink, setUserLink] = useState(0);\n\n  const [allWaves, setAllWaves] = useState([]);\n  const contractAddress = \"0xfeDee730EBDEcfA2B8e2AC016DF74f5998C21DDc\";\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n            link: wave.link,\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n        setTotalWaves(wavesCleaned.length);\n        console.log(\"setAllWaves\", wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        setHasWallet(false);\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setHasWallet(true);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        setHasWallet(false);\n        console.log(\"No authorized account found\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTotalWaves = async () => {\n    setLoading(true);\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        console.log(\"wavePortalContract\", signer);\n\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        let count = await wavePortalContract.functions.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        // setTotalWaves(count.toNumber() ? count.toNumber() : 0)\n        setLoading(false);\n      } else {\n        setLoading(false);\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      setLoading(false);\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    setLoading(true);\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = await wavePortalContract.wave(userMessage, userLink, {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        // setTotalWaves(count.toNumber() ? count.toNumber() : 0)\n        setUserMessage(\"\");\n\n        await getAllWaves();\n\n        setLoading(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n        setLoading(false);\n      }\n    } catch (error) {\n      setLoading(false);\n      console.log(error);\n    }\n  };\n\n  React.useEffect(async () => {\n    checkIfWalletConnected();\n    getTotalWaves();\n  }, []);\n\n  function getYoutubeId(url) {\n    const regExp =\n      /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n\n    return match && match[2].length === 11 ? match[2] : null;\n  }\n\n  if (!hasWallet) {\n    return (\n      <div className=\"mainContainer\">\n        <div className=\"dataContainer\">\n          <img\n            style={{ width: \"80%\" }}\n            src=\"https://i.ytimg.com/vi/UkzCHCN0Tj8/maxresdefault.jpg\"\n          />\n          <div className=\"header\">\n            Share your favourite wrestling moments with me! 🤯\n          </div>\n\n          <div className=\"bio\">\n            Share your favourite wrestling moment and get a chance to win 0.001\n            ETH 😨\n          </div>\n\n          {!loading ? (\n            <button className=\"waveButton\" onClick={wave}>\n              Connect Wallet\n            </button>\n          ) : (\n            <button className=\"waveButton\">Loading</button>\n          )}\n\n          {allWaves.map((wave, index) => {\n            return (\n              <div\n                key={index}\n                style={{\n                  backgroundColor: \"#fbfbfb\",\n                  marginTop: \"16px\",\n                  padding: \"8px\",\n                }}\n              >\n                <div>\n                  <p style={{ color: \"red\" }}>Message:</p> {wave.message}\n                </div>\n                <br />\n                <div>Address: {wave.address}</div>\n                <div>Time: {wave.timestamp.toString()}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"mainContainer\">\n        <div className=\"dataContainer\">\n          <img\n            style={{ width: \"80%\" }}\n            src=\"https://i.ytimg.com/vi/UkzCHCN0Tj8/maxresdefault.jpg\"\n          />\n          <div className=\"header\">\n            Share your favourite wrestling moments with me! 🤯\n          </div>\n\n          <div className=\"bio\">\n            Share your favourite wrestling moment and get a chance to win 0.001\n            ETH 😨\n          </div>\n\n          <div className=\"bio\">Total waves {totalWaves}</div>\n\n          <input\n            placeholder=\"Enter youtube link\"\n            type=\"text\"\n            onChange={(e) => {\n              setUserLink(e.target.value);\n              console.log(\"test\", userMessage);\n            }}\n          />\n\n          <input\n            placeholder=\"Enter message\"\n            type=\"text\"\n            onChange={(e) => {\n              setUserMessage(e.target.value);\n              console.log(\"test\", userMessage);\n            }}\n          />\n\n          {!loading ? (\n            <button className=\"waveButton\" onClick={wave}>\n              Send link\n            </button>\n          ) : (\n            <button className=\"waveButton\">Loading</button>\n          )}\n\n          {allWaves.map((wave, index) => {\n            return (\n              <Card\n                key={index}\n                style={{\n                  width: \"425px\",\n                  background: \"white\",\n                  justifyContent: \"ceneter\",\n                  padding: 10,\n                  margin: 10,\n                }}\n              >\n                <iframe\n                  width=\"420\"\n                  height=\"315\"\n                  src={`https://www.youtube.com/embed/${getYoutubeId(\n                    wave.link\n                  )}`}\n                  frameborder=\"0\"\n                  allowfullscreen\n                ></iframe>\n\n                <Card.Body style={{ height: \"200px\" }}>\n                  <Card.Title style={{ fontWeight: \"bold\" }}>\n                    Message\n                  </Card.Title>\n                  <Card.Text>{wave.message}</Card.Text>\n\n                  <Card.Text style={{ fontSize: 10 }}>\n                    Address: {wave.address}\n                  </Card.Text>\n                  <Card.Text style={{ fontSize: 10 }}>\n                    Time: {wave.timestamp.toString()}\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}